// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.LiveCapture.VirtualCamera
{
    public struct AnchorSettings : System.IEquatable<Unity.LiveCapture.VirtualCamera.AnchorSettings>
    {
        [UnityEngine.Tooltip(@"The settings used to configure the smoothing applied to the anchor's motion.")] public Unity.LiveCapture.VirtualCamera.Damping Damping;
        public static readonly Unity.LiveCapture.VirtualCamera.AnchorSettings Default;
        [Unity.LiveCapture.EnumFlagButtonGroup(60)] [UnityEngine.Tooltip(@"The position axes to follow when anchored.")] public Unity.LiveCapture.VirtualCamera.Axis PositionLock;
        [UnityEngine.Tooltip(@"Offset local to the target's anchor Transform.")] public UnityEngine.Vector3 PositionOffset;
        [Unity.LiveCapture.EnumFlagButtonGroup(60)] [UnityEngine.Tooltip(@"The rotation axes to follow when anchored.")] public Unity.LiveCapture.VirtualCamera.Axis RotationLock;
        public virtual bool Equals(object obj);
        public virtual bool Equals(Unity.LiveCapture.VirtualCamera.AnchorSettings other);
        public virtual int GetHashCode();
        public static bool operator ==(Unity.LiveCapture.VirtualCamera.AnchorSettings a, Unity.LiveCapture.VirtualCamera.AnchorSettings b);
        public static bool operator !=(Unity.LiveCapture.VirtualCamera.AnchorSettings a, Unity.LiveCapture.VirtualCamera.AnchorSettings b);
        public virtual string ToString();
    }

    public struct AspectRatioPreset
    {
        public float AspectRatio { get; set; }
        public string Name { get; set; }
    }

    [UnityEngine.CreateAssetMenu(fileName = @"Aspect Ratio Presets", menuName = @"Live Capture/Virtual Camera/Aspect Ratio Presets", order = 1)] [UnityEngine.ExcludeFromPreset] [UnityEngine.HelpURL(@"https://docs.unity3d.com/Packages/com.unity.live-capture@4.0/manual/ref-asset-aspect-ratio-presets.html")] public class AspectRatioPresets : UnityEngine.ScriptableObject
    {
        public Unity.LiveCapture.VirtualCamera.AspectRatioPreset[] AspectRatios { get; }
        public AspectRatioPresets() {}
    }

    [System.Flags] public enum Axis
    {
        public const Unity.LiveCapture.VirtualCamera.Axis None = 0;
        public byte value__;
        public const Unity.LiveCapture.VirtualCamera.Axis X = 1;
        public const Unity.LiveCapture.VirtualCamera.Axis Y = 2;
        public const Unity.LiveCapture.VirtualCamera.Axis Z = 4;
    }

    public struct CameraBody : System.IEquatable<Unity.LiveCapture.VirtualCamera.CameraBody>
    {
        public static readonly Unity.LiveCapture.VirtualCamera.CameraBody DefaultParams;
        public static UnityEngine.Vector2 DefaultSensorSize { get; }
        public int Iso { get; set; }
        public UnityEngine.Vector2 SensorSize { get; set; }
        public float ShutterSpeed { get; set; }
        public virtual bool Equals(object obj);
        public virtual bool Equals(Unity.LiveCapture.VirtualCamera.CameraBody other);
        public virtual int GetHashCode();
        public static bool operator ==(Unity.LiveCapture.VirtualCamera.CameraBody a, Unity.LiveCapture.VirtualCamera.CameraBody b);
        public static bool operator !=(Unity.LiveCapture.VirtualCamera.CameraBody a, Unity.LiveCapture.VirtualCamera.CameraBody b);
    }

    public struct Damping : System.IEquatable<Unity.LiveCapture.VirtualCamera.Damping>
    {
        [UnityEngine.Tooltip(@"Time in seconds for the camera to catch up with the target rotation.")] public float Aim;
        [UnityEngine.Tooltip(@"Time in seconds for the camera to reach reach the target position.")] public UnityEngine.Vector3 Body;
        public static readonly Unity.LiveCapture.VirtualCamera.Damping Default;
        [UnityEngine.Tooltip(@"Enable or disable damping.")] public bool Enabled;
        public virtual bool Equals(object obj);
        public virtual bool Equals(Unity.LiveCapture.VirtualCamera.Damping other);
        public virtual int GetHashCode();
        public static bool operator ==(Unity.LiveCapture.VirtualCamera.Damping a, Unity.LiveCapture.VirtualCamera.Damping b);
        public static bool operator !=(Unity.LiveCapture.VirtualCamera.Damping a, Unity.LiveCapture.VirtualCamera.Damping b);
    }

    [UnityEngine.AddComponentMenu(@"Live Capture/Virtual Camera/Focus Plane Renderer")] [UnityEngine.DisallowMultipleComponent] [UnityEngine.ExecuteAlways] [UnityEngine.HelpURL(@"https://docs.unity3d.com/Packages/com.unity.live-capture@4.0/manual/ref-component-focus-plane-renderer.html")] public class FocusPlaneRenderer : UnityEngine.MonoBehaviour
    {
        public FocusPlaneRenderer() {}
        public void SetCamera(UnityEngine.Camera camera);
        public void SetFocusDistance(float value);
    }

    [UnityEngine.AddComponentMenu(@"Live Capture/Virtual Camera/Frame Lines")] [UnityEngine.DisallowMultipleComponent] [UnityEngine.ExecuteAlways] [UnityEngine.HelpURL(@"https://docs.unity3d.com/Packages/com.unity.live-capture@4.0/manual/ref-component-frame-lines.html")] [UnityEngine.RequireComponent(typeof(UnityEngine.Camera))] public class FrameLines : UnityEngine.MonoBehaviour
    {
        public bool AspectRatioEnabled { get; set; }
        public bool CenterMarkerEnabled { get; set; }
        public float CropAspect { get; set; }
        public Unity.LiveCapture.VirtualCamera.GateFit GateFit { get; set; }
        public bool GateMaskEnabled { get; set; }
        public FrameLines() {}
    }

    public enum GateFit
    {
        [Unity.LiveCapture.Description(@"The sensor gate fits completely inside the resolution gate.")] public const Unity.LiveCapture.VirtualCamera.GateFit Fill = 0;
        [Unity.LiveCapture.Description(@"The render frame fits completely inside the resolution gate.")] public const Unity.LiveCapture.VirtualCamera.GateFit Overscan = 1;
        public byte value__;
    }

    public interface IVirtualCameraClient : Unity.LiveCapture.CompanionApp.ICompanionAppClient
    {
    }

    public struct Lens : System.IEquatable<Unity.LiveCapture.VirtualCamera.Lens>
    {
        public static readonly Unity.LiveCapture.VirtualCamera.Lens DefaultParams;
        public float Aperture { get; set; }
        public float FocalLength { get; set; }
        public float FocusDistance { get; set; }
        public virtual bool Equals(object obj);
        public virtual bool Equals(Unity.LiveCapture.VirtualCamera.Lens other);
        public virtual int GetHashCode();
        public static bool operator ==(Unity.LiveCapture.VirtualCamera.Lens a, Unity.LiveCapture.VirtualCamera.Lens b);
        public static bool operator !=(Unity.LiveCapture.VirtualCamera.Lens a, Unity.LiveCapture.VirtualCamera.Lens b);
    }

    public class LensAsset : UnityEngine.ScriptableObject
    {
        public Unity.LiveCapture.VirtualCamera.Lens DefaultValues { get; set; }
        public Unity.LiveCapture.VirtualCamera.LensIntrinsics Intrinsics { get; set; }
        public string Manufacturer { get; set; }
        public string Model { get; set; }
        public LensAsset() {}
    }

    public struct LensIntrinsics : System.IEquatable<Unity.LiveCapture.VirtualCamera.LensIntrinsics>
    {
        public static readonly Unity.LiveCapture.VirtualCamera.LensIntrinsics DefaultParams;
        public float Anamorphism { get; set; }
        public UnityEngine.Vector2 ApertureRange { get; set; }
        public float BarrelClipping { get; set; }
        public int BladeCount { get; set; }
        public float CloseFocusDistance { get; set; }
        public UnityEngine.Vector2 Curvature { get; set; }
        public UnityEngine.Vector2 FocalLengthRange { get; set; }
        public UnityEngine.Vector2 LensShift { get; set; }
        public virtual bool Equals(object obj);
        public virtual bool Equals(Unity.LiveCapture.VirtualCamera.LensIntrinsics other);
        public virtual int GetHashCode();
        public static bool operator ==(Unity.LiveCapture.VirtualCamera.LensIntrinsics a, Unity.LiveCapture.VirtualCamera.LensIntrinsics b);
        public static bool operator !=(Unity.LiveCapture.VirtualCamera.LensIntrinsics a, Unity.LiveCapture.VirtualCamera.LensIntrinsics b);
    }

    [UnityEngine.CreateAssetMenu(menuName = @"Live Capture/Virtual Camera/Lens Kit", order = 2)] [UnityEngine.ExcludeFromPreset] [UnityEngine.HelpURL(@"https://docs.unity3d.com/Packages/com.unity.live-capture@4.0/manual/ref-asset-lens-kit.html")] public class LensKit : UnityEngine.ScriptableObject
    {
        public Unity.LiveCapture.VirtualCamera.LensAsset[] Lenses { get; }
        public LensKit() {}
    }

    public struct SensorPreset : System.IEquatable<Unity.LiveCapture.VirtualCamera.SensorPreset>
    {
        public string Name { get; set; }
        public UnityEngine.Vector2 SensorSize { get; set; }
        public virtual bool Equals(object obj);
        public virtual bool Equals(Unity.LiveCapture.VirtualCamera.SensorPreset other);
        public virtual int GetHashCode();
        public static bool operator ==(Unity.LiveCapture.VirtualCamera.SensorPreset left, Unity.LiveCapture.VirtualCamera.SensorPreset right);
        public static bool operator !=(Unity.LiveCapture.VirtualCamera.SensorPreset left, Unity.LiveCapture.VirtualCamera.SensorPreset right);
    }

    [UnityEngine.CreateAssetMenu(fileName = @"Sensor Presets", menuName = @"Live Capture/Virtual Camera/Sensor Presets", order = 1)] [UnityEngine.ExcludeFromPreset] [UnityEngine.HelpURL(@"https://docs.unity3d.com/Packages/com.unity.live-capture@4.0/manual/ref-asset-sensor-presets.html")] public class SensorPresets : UnityEngine.ScriptableObject
    {
        public Unity.LiveCapture.VirtualCamera.SensorPreset[] Sensors { get; }
        public SensorPresets() {}
    }

    [UnityEngine.AddComponentMenu(@"Live Capture/Virtual Camera/Virtual Camera Actor")] [UnityEngine.DisallowMultipleComponent] [UnityEngine.ExcludeFromPreset] [UnityEngine.ExecuteAlways] [UnityEngine.HelpURL(@"https://docs.unity3d.com/Packages/com.unity.live-capture@4.0/manual/ref-component-virtual-camera-actor.html")] [UnityEngine.RequireComponent(typeof(UnityEngine.Animator))] public class VirtualCameraActor : UnityEngine.MonoBehaviour, Unity.LiveCapture.IPreviewable
    {
        public UnityEngine.Animator Animator { get; }
        public Unity.LiveCapture.VirtualCamera.CameraBody CameraBody { get; set; }
        public float CropAspect { get; set; }
        public bool DepthOfFieldEnabled { get; set; }
        public Unity.LiveCapture.VirtualCamera.Lens Lens { get; set; }
        public Unity.LiveCapture.VirtualCamera.LensIntrinsics LensIntrinsics { get; set; }
        public VirtualCameraActor() {}
        public virtual void Register(Unity.LiveCapture.IPropertyPreviewer previewer);
    }

    [Unity.LiveCapture.CreateDeviceMenuItem(@"Virtual Camera Device", 0)] [UnityEngine.AddComponentMenu(@"")] [UnityEngine.DisallowMultipleComponent] [UnityEngine.HelpURL(@"https://docs.unity3d.com/Packages/com.unity.live-capture@4.0/manual/ref-component-virtual-camera-device.html")] [UnityEngine.RequireComponent(typeof(Unity.LiveCapture.VirtualCamera.FocusPlaneRenderer))] public class VirtualCameraDevice : Unity.LiveCapture.CompanionApp.CompanionAppDevice<Unity.LiveCapture.VirtualCamera.IVirtualCameraClient>, Unity.LiveCapture.IRegistrable, Unity.LiveCapture.ITimedDataSource
    {
        public Unity.LiveCapture.VirtualCamera.VirtualCameraActor Actor { get; set; }
        public bool AnchorEnabled { get; set; }
        public Unity.LiveCapture.VirtualCamera.AnchorSettings AnchorSettings { get; set; }
        public UnityEngine.Transform AnchorTarget { get; set; }
        public virtual int BufferSize { get; set; }
        public Unity.LiveCapture.VirtualCamera.CameraBody CameraBody { get; }
        public virtual Unity.LiveCapture.FrameRate FrameRate { get; }
        public virtual string Id { get; }
        public virtual bool IsSynchronized { get; set; }
        public Unity.LiveCapture.VirtualCamera.Lens Lens { get; set; }
        public Unity.LiveCapture.VirtualCamera.LensAsset LensAsset { get; set; }
        public Unity.LiveCapture.VirtualCamera.LensIntrinsics LensIntrinsics { get; }
        public virtual System.Nullable<int> MaxBufferSize { get; }
        public virtual System.Nullable<int> MinBufferSize { get; }
        public virtual Unity.LiveCapture.FrameTime Offset { get; set; }
        public UnityEngine.Pose Origin { get; }
        public UnityEngine.Pose Pose { get; }
        public virtual Unity.LiveCapture.ISynchronizer Synchronizer { get; set; }
        public VirtualCameraDevice() {}
        protected virtual string GetAssetName();
        public virtual bool IsReady();
        public virtual void LiveUpdate();
        protected virtual void OnClientAssigned();
        protected virtual void OnClientUnassigned();
        protected virtual void OnDisable();
        protected virtual void OnEnable();
        protected virtual void OnRecordingChanged();
        protected virtual void OnRegisterLiveProperties(Unity.LiveCapture.IPropertyPreviewer previewer);
        protected virtual void OnShotChanged(Unity.LiveCapture.IShot shot);
        protected virtual void OnValidate();
        public virtual Unity.LiveCapture.TimedSampleStatus PresentAt(Unity.LiveCapture.FrameTimeWithRate presentTime);
        public virtual bool TryGetBufferRange(out Unity.LiveCapture.FrameTime oldestSample, out Unity.LiveCapture.FrameTime newestSample);
        public virtual void UpdateClient();
        public virtual void UpdateDevice();
        public virtual void Write(Unity.LiveCapture.ITakeBuilder takeBuilder);
    }
}
